import React, { useState, useEffect } from 'react';
import { auth } from '../firebase';

const Documents = ({ onClose, onViewDocument }) => {
  const [documents, setDocuments] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadDocuments();
  }, []);

  const loadDocuments = () => {
    const user = auth.currentUser;
    if (!user) return;
    
    const documentsKey = `qash_documents_${user.uid}`;
    const savedDocs = JSON.parse(localStorage.getItem(documentsKey) || '[]');
    setDocuments(savedDocs);
    setLoading(false);
  };

  const filteredDocuments = documents.filter(doc => 
    doc.fileName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const formatFileSize = (bytes) => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const downloadPDF = async (doc) => {
    // This will be implemented with a proper PDF library later
    // For now, create a simple text report
    const content = generatePDFContent(doc);
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${doc.fileName.replace(/\.[^/.]+$/, '')}_analysis.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const generatePDFContent = (doc) => {
    let content = `QASH FINANCIAL ANALYSIS REPORT\n`;
    content += `${'='.repeat(60)}\n\n`;
    content += `Document: ${doc.fileName}\n`;
    content += `Analysis Date: ${formatDate(doc.uploadDate)}\n`;
    content += `File Count: ${doc.fileCount}\n\n`;
    
    if (doc.analysis && doc.analysis.files) {
      doc.analysis.files.forEach((file, index) => {
        content += `\nFILE ${index + 1}: ${file.fileName}\n`;
        content += `${'-'.repeat(40)}\n`;
        
        if (file.analysis) {
          const analysis = file.analysis;
          
          // Executive Summary
          if (analysis.executiveSummary) {
            content += '\nEXECUTIVE SUMMARY\n';
            if (typeof analysis.executiveSummary === 'object') {
              Object.entries(analysis.executiveSummary).forEach(([key, value]) => {
                if (value) {
                  content += `• ${key.replace(/([A-Z])/g, ' $1').trim()}: ${value}\n`;
                }
              });
            }
          }
          
          // Key Metrics
          ['financialHealth', 'keyRisks', 'cashFlowProjection', 'recommendations'].forEach(section => {
            if (analysis[section]) {
              content += `\n${section.toUpperCase().replace(/([A-Z])/g, ' $1').trim()}\n`;
              content += `${analysis[section]}\n`;
            }
          });
        }
      });
    }
    
    content += `\n${'='.repeat(60)}\n`;
    content += `Generated by Qash - ${new Date().toLocaleString()}\n`;
    
    return content;
  };

  const shareDocument = (doc) => {
    // For now, copy a shareable text to clipboard
    const shareText = `Check out this financial analysis from Qash:\n\nDocument: ${doc.fileName}\nAnalyzed: ${formatDate(doc.uploadDate)}\n\n[Analysis details would be included in email]`;
    
    navigator.clipboard.writeText(shareText).then(() => {
      // Show success message
      const msg = document.createElement('div');
      msg.style.cssText = `
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #3B82F6;
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        z-index: 9999;
      `;
      msg.textContent = 'Share text copied to clipboard!';
      document.body.appendChild(msg);
      setTimeout(() => document.body.removeChild(msg), 3000);
    });
  };

  const deleteDocument = (docId) => {
    if (window.confirm('Are you sure you want to delete this document?')) {
      const user = auth.currentUser;
      if (!user) return;
      
      const updatedDocs = documents.filter(doc => doc.id !== docId);
      const documentsKey = `qash_documents_${user.uid}`;
      localStorage.setItem(documentsKey, JSON.stringify(updatedDocs));
      setDocuments(updatedDocs);
    }
  };

  const [emailDialog, setEmailDialog] = useState({ open: false, documentId: null });
  const [emailForm, setEmailForm] = useState({ to: '', subject: '', message: '' });
  const [sending, setSending] = useState(false);

  const handleForward = (id) => {
    const document = documents.find(doc => doc.id === id);
    setEmailForm({
      to: '',
      subject: `Financial Analysis Report - ${document.fileName}`,
      message: `Hi,\n\nPlease find attached the financial analysis report for ${document.fileName}.\n\nBest regards`
    });
    setEmailDialog({ open: true, documentId: id });
  };

  const sendEmail = async () => {
    setSending(true);
    const document = documents.find(doc => doc.id === emailDialog.documentId);
    
    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/send-report`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${await auth.currentUser.getIdToken()}`
        },
        body: JSON.stringify({
          to: emailForm.to,
          subject: emailForm.subject,
          message: emailForm.message,
          document: document
        })
      });

      if (response.ok) {
        alert('Report sent successfully!');
        setEmailDialog({ open: false, documentId: null });
        setEmailForm({ to: '', subject: '', message: '' });
      } else {
        alert('Failed to send report. Please try again.');
      }
    } catch (error) {
      console.error('Error sending email:', error);
      alert('Error sending report. Please try again.');
    } finally {
      setSending(false);
    }
  };

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 9999
    }}>
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        width: '90%',
        maxWidth: '1000px',
        maxHeight: '90vh',
        display: 'flex',
        flexDirection: 'column',
        boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
      }}>
        {/* Header */}
        <div style={{
          padding: '24px',
          borderBottom: '1px solid #E5E7EB',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <div>
            <h2 style={{ 
              fontSize: '24px', 
              fontWeight: '600', 
              margin: '0 0 4px 0',
              color: '#111827'
            }}>
              Documents
            </h2>
            <p style={{ margin: 0, color: '#6B7280', fontSize: '14px' }}>
              Your saved financial analyses
            </p>
          </div>
          <button
            onClick={onClose}
            style={{
              background: 'none',
              border: 'none',
              fontSize: '24px',
              color: '#6B7280',
              cursor: 'pointer',
              padding: '4px'
            }}
          >
            ×
          </button>
        </div>

        {/* Search Bar */}
        <div style={{ padding: '16px 24px 0' }}>
          <input
            type="text"
            placeholder="Search documents..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            style={{
              width: '100%',
              padding: '10px 16px',
              border: '1px solid #E5E7EB',
              borderRadius: '8px',
              fontSize: '14px',
              outline: 'none'
            }}
          />
        </div>

        {/* Documents List */}
        <div style={{
          flex: 1,
          overflow: 'auto',
          padding: '16px 24px 24px'
        }}>
          {loading ? (
            <div style={{ textAlign: 'center', padding: '40px', color: '#6B7280' }}>
              Loading documents...
            </div>
          ) : filteredDocuments.length === 0 ? (
            <div style={{ 
              textAlign: 'center', 
              padding: '40px',
              backgroundColor: '#F9FAFB',
              borderRadius: '8px',
              border: '1px solid #E5E7EB'
            }}>
              <p style={{ color: '#6B7280', margin: '0 0 8px 0' }}>
                {searchTerm ? 'No documents found matching your search.' : 'No documents saved yet.'}
              </p>
              <p style={{ color: '#9CA3AF', fontSize: '14px', margin: 0 }}>
                Your analyzed documents will appear here automatically.
              </p>
            </div>
          ) : (
            <div style={{ display: 'grid', gap: '12px' }}>
              {filteredDocuments.map(doc => (
                <div key={doc.id} style={{
                  border: '1px solid #E5E7EB',
                  borderRadius: '8px',
                  padding: '16px',
                  backgroundColor: 'white',
                  transition: 'all 0.2s',
                  cursor: 'pointer'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.boxShadow = '0 4px 6px -1px rgba(0, 0, 0, 0.1)';
                  e.currentTarget.style.borderColor = '#D1D5DB';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.boxShadow = 'none';
                  e.currentTarget.style.borderColor = '#E5E7EB';
                }}
                onClick={() => onViewDocument(doc)}
                >
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                    <div style={{ flex: 1 }}>
                      <h3 style={{ 
                        margin: '0 0 4px 0', 
                        fontSize: '16px', 
                        fontWeight: '600',
                        color: '#111827'
                      }}>
                        {doc.fileName}
                      </h3>
                      <div style={{ 
                        display: 'flex', 
                        gap: '16px', 
                        fontSize: '13px', 
                        color: '#6B7280',
                        marginBottom: '8px'
                      }}>
                        <span>{formatDate(doc.uploadDate)}</span>
                        <span>•</span>
                        <span>{doc.fileCount} file{doc.fileCount > 1 ? 's' : ''}</span>
                        <span>•</span>
                        <span>{formatFileSize(doc.size)}</span>
                      </div>
                      {doc.analysis?.files?.[0]?.analysis?.executiveSummary && (
                        <div style={{ 
                          fontSize: '12px', 
                          color: '#6B7280',
                          marginTop: '8px'
                        }}>
                          {typeof doc.analysis.files[0].analysis.executiveSummary === 'object' && 
                           doc.analysis.files[0].analysis.executiveSummary.revenueGrowth && (
                            <span style={{ marginRight: '12px' }}>
                              Revenue Growth: {doc.analysis.files[0].analysis.executiveSummary.revenueGrowth}
                            </span>
                          )}
                        </div>
                      )}
                    </div>
                    <div style={{ 
                      display: 'flex', 
                      gap: '8px',
                      marginLeft: '16px'
                    }}>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          downloadPDF(doc);
                        }}
                        style={{
                          padding: '6px 12px',
                          border: '1px solid #E5E7EB',
                          borderRadius: '6px',
                          backgroundColor: 'white',
                          color: '#374151',
                          fontSize: '13px',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px'
                        }}
                        title="Download as PDF"
                      >
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M21 15V19C21 19.5304 20.7893 20.0391 20.4142 20.4142C20.0391 20.7893 19.5304 21 19 21H5C4.46957 21 3.96086 20.7893 3.58579 20.4142C3.21071 20.0391 3 19.5304 3 19V15" stroke="#374151" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          <polyline points="7 10 12 15 17 10" stroke="#374151" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          <line x1="12" y1="15" x2="12" y2="3" stroke="#374151" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        PDF
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleForward(doc.id);
                        }}
                        style={{
                          padding: '6px 12px',
                          border: '1px solid #E5E7EB',
                          borderRadius: '6px',
                          backgroundColor: 'white',
                          color: '#374151',
                          fontSize: '13px',
                          cursor: 'pointer',
                          display: 'flex',
                          alignItems: 'center',
                          gap: '4px'
                        }}
                        title="Forward document via email"
                      >
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M22 2L11 13" stroke="#374151" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="#374151" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        Forward
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          deleteDocument(doc.id);
                        }}
                        style={{
                          padding: '6px',
                          border: 'none',
                          backgroundColor: 'transparent',
                          color: '#DC2626',
                          fontSize: '13px',
                          cursor: 'pointer'
                        }}
                        title="Delete document"
                      >
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <polyline points="3 6 5 6 21 6" stroke="#DC2626" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          <path d="M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6" stroke="#DC2626" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Email Dialog */}
      {emailDialog.open && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 10000
        }}>
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            width: '90%',
            maxWidth: '500px',
            padding: '24px',
            boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)'
          }}>
            <h3 style={{ margin: '0 0 20px 0', fontSize: '20px', fontWeight: '600' }}>
              Forward Document via Email
            </h3>
            
            <div style={{ marginBottom: '16px' }}>
              <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: '500' }}>
                To:
              </label>
              <input
                type="email"
                value={emailForm.to}
                onChange={(e) => setEmailForm({ ...emailForm, to: e.target.value })}
                placeholder="recipient@example.com"
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #E5E7EB',
                  borderRadius: '6px',
                  fontSize: '14px',
                  outline: 'none'
                }}
              />
            </div>

            <div style={{ marginBottom: '16px' }}>
              <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: '500' }}>
                Subject:
              </label>
              <input
                type="text"
                value={emailForm.subject}
                onChange={(e) => setEmailForm({ ...emailForm, subject: e.target.value })}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #E5E7EB',
                  borderRadius: '6px',
                  fontSize: '14px',
                  outline: 'none'
                }}
              />
            </div>

            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '6px', fontSize: '14px', fontWeight: '500' }}>
                Message:
              </label>
              <textarea
                value={emailForm.message}
                onChange={(e) => setEmailForm({ ...emailForm, message: e.target.value })}
                rows={4}
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  border: '1px solid #E5E7EB',
                  borderRadius: '6px',
                  fontSize: '14px',
                  outline: 'none',
                  resize: 'vertical'
                }}
              />
            </div>

            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '12px' }}>
              <button
                onClick={() => {
                  setEmailDialog({ open: false, documentId: null });
                  setEmailForm({ to: '', subject: '', message: '' });
                }}
                disabled={sending}
                style={{
                  padding: '10px 20px',
                  border: '1px solid #E5E7EB',
                  borderRadius: '6px',
                  backgroundColor: 'white',
                  color: '#374151',
                  fontSize: '14px',
                  cursor: 'pointer',
                  fontWeight: '500'
                }}
              >
                Cancel
              </button>
              <button
                onClick={sendEmail}
                disabled={sending || !emailForm.to || !emailForm.subject}
                style={{
                  padding: '10px 20px',
                  border: 'none',
                  borderRadius: '6px',
                  backgroundColor: sending || !emailForm.to || !emailForm.subject ? '#E5E7EB' : '#3B82F6',
                  color: 'white',
                  fontSize: '14px',
                  cursor: sending || !emailForm.to || !emailForm.subject ? 'not-allowed' : 'pointer',
                  fontWeight: '500'
                }}
              >
                {sending ? 'Sending...' : 'Send Report'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Documents;